{
  "version": 3,
  "sources": ["../../../src/cryptography/signature.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { PublicKey } from './publickey.js';\nimport type { MultiSigStruct } from '../multisig/publickey.js';\nimport { builder } from '../builder/bcs.js';\n\nexport type SignatureScheme = 'ED25519' | 'Secp256k1' | 'Secp256r1' | 'MultiSig';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SerializeSignatureInput = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** @deprecated use publicKey instead */\n\tpubKey?: PublicKey;\n\t/** Base64-encoded public key */\n\tpublicKey?: PublicKey;\n};\n\n/**\n * (`flag || signature || pubkey` bytes, as base-64 encoded string).\n * Signature is committed to the intent message of the transaction data, as base-64 encoded string.\n */\nexport type SerializedSignature = string;\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n\tED25519: 0x00,\n\tSecp256k1: 0x01,\n\tSecp256r1: 0x02,\n\tMultiSig: 0x03,\n\tZk: 0x05,\n};\n\nexport const SIGNATURE_SCHEME_TO_SIZE = {\n\tED25519: 32,\n\tSecp256k1: 33,\n\tSecp256r1: 33,\n};\n\nexport const SIGNATURE_FLAG_TO_SCHEME = {\n\t0x00: 'ED25519',\n\t0x01: 'Secp256k1',\n\t0x02: 'Secp256r1',\n\t0x03: 'MultiSig',\n\t0x05: 'Zk',\n} as const;\n\nexport type SignatureFlag = keyof typeof SIGNATURE_FLAG_TO_SCHEME;\n\n/**\n * Takes in a signature, its associated signing scheme and a public key, then serializes this data\n */\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpubKey,\n\tpublicKey = pubKey,\n}: SerializeSignatureInput): SerializedSignature {\n\tif (!publicKey) {\n\t\tthrow new Error('`publicKey` is required');\n\t}\n\n\tconst pubKeyBytes = publicKey.toBytes();\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKeyBytes.length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKeyBytes, 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\n/**\n * Decodes a serialized signature into its constituent components: the signature scheme, the actual signature, and the public key\n */\nexport function parseSerializedSignature(serializedSignature: SerializedSignature) {\n\tconst bytes = fromB64(serializedSignature);\n\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\tconst multisig: MultiSigStruct = builder.de('MultiSig', bytes.slice(1));\n\t\treturn {\n\t\t\tserializedSignature,\n\t\t\tsignatureScheme,\n\t\t\tmultisig,\n\t\t\tbytes,\n\t\t};\n\t}\n\n\tif (signatureScheme === 'Zk') {\n\t\tthrow new Error('Unable to parse a zk signature. (not implemented yet)');\n\t}\n\n\tif (!(signatureScheme in SIGNATURE_SCHEME_TO_SIZE)) {\n\t\tthrow new Error('Unsupported signature scheme');\n\t}\n\n\tconst size = SIGNATURE_SCHEME_TO_SIZE[signatureScheme as keyof typeof SIGNATURE_SCHEME_TO_SIZE];\n\n\tconst signature = bytes.slice(1, bytes.length - size);\n\tconst publicKey = bytes.slice(1 + signature.length);\n\n\treturn {\n\t\tserializedSignature,\n\t\tsignatureScheme,\n\t\tsignature,\n\t\tpublicKey,\n\t\tbytes,\n\t};\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAA+B;AAG/B,IAAAA,cAAwB;AAuBjB,MAAM,2BAA2B;AAAA,EACvC,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AAAA,EACX,UAAU;AAAA,EACV,IAAI;AACL;AAEO,MAAM,2BAA2B;AAAA,EACvC,SAAS;AAAA,EACT,WAAW;AAAA,EACX,WAAW;AACZ;AAEO,MAAM,2BAA2B;AAAA,EACvC,GAAM;AAAA,EACN,GAAM;AAAA,EACN,GAAM;AAAA,EACN,GAAM;AAAA,EACN,GAAM;AACP;AAOO,SAAS,sBAAsB;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AACb,GAAiD;AAChD,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC1C;AAEA,QAAM,cAAc,UAAU,QAAQ;AACtC,QAAM,sBAAsB,IAAI,WAAW,IAAI,UAAU,SAAS,YAAY,MAAM;AACpF,sBAAoB,IAAI,CAAC,yBAAyB,eAAe,CAAC,CAAC;AACnE,sBAAoB,IAAI,WAAW,CAAC;AACpC,sBAAoB,IAAI,aAAa,IAAI,UAAU,MAAM;AACzD,aAAO,kBAAM,mBAAmB;AACjC;AAKO,SAAS,yBAAyB,qBAA0C;AAClF,QAAM,YAAQ,oBAAQ,mBAAmB;AAEzC,QAAM,kBACL,yBAAyB,MAAM,CAAC,CAA0C;AAE3E,MAAI,oBAAoB,YAAY;AACnC,UAAM,WAA2B,oBAAQ,GAAG,YAAY,MAAM,MAAM,CAAC,CAAC;AACtE,WAAO;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAEA,MAAI,oBAAoB,MAAM;AAC7B,UAAM,IAAI,MAAM,uDAAuD;AAAA,EACxE;AAEA,MAAI,EAAE,mBAAmB,2BAA2B;AACnD,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAC/C;AAEA,QAAM,OAAO,yBAAyB,eAAwD;AAE9F,QAAM,YAAY,MAAM,MAAM,GAAG,MAAM,SAAS,IAAI;AACpD,QAAM,YAAY,MAAM,MAAM,IAAI,UAAU,MAAM;AAElD,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": ["import_bcs"]
}
