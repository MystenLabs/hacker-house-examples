{
  "version": 3,
  "sources": ["../../../src/types/checkpoints.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tnumber,\n\tobject,\n\tstring,\n\ttuple,\n\tboolean,\n\toptional,\n\tany,\n\tnullable,\n} from 'superstruct';\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\n/** @deprecated Use `string` instead. */\nexport const CheckPointContentsDigest = string();\n/** @deprecated Use `string` instead. */\nexport type CheckPointContentsDigest = Infer<typeof CheckPointContentsDigest>;\n\n/** @deprecated Use `string` instead. */\nexport const CheckpointDigest = string();\n/** @deprecated Use `string` instead. */\nexport type CheckpointDigest = Infer<typeof CheckpointDigest>;\n\nexport const ECMHLiveObjectSetDigest = object({\n\tdigest: array(number()),\n});\nexport type ECMHLiveObjectSetDigest = Infer<typeof ECMHLiveObjectSetDigest>;\n\nexport const CheckpointCommitment = any();\nexport type CheckpointCommitment = Infer<typeof CheckpointCommitment>;\n\n/** @deprecated Use `string` instead. */\nexport const ValidatorSignature = string();\n/** @deprecated Use `string` instead. */\nexport type ValidatorSignature = Infer<typeof ValidatorSignature>;\n\nexport const EndOfEpochData = object({\n\tnextEpochCommittee: array(tuple([string(), string()])),\n\tnextEpochProtocolVersion: string(),\n\tepochCommitments: array(CheckpointCommitment),\n});\nexport type EndOfEpochData = Infer<typeof EndOfEpochData>;\n\nexport const ExecutionDigests = object({\n\ttransaction: string(),\n\teffects: string(),\n});\n\nexport const Checkpoint = object({\n\tepoch: string(),\n\tsequenceNumber: string(),\n\tdigest: string(),\n\tnetworkTotalTransactions: string(),\n\tpreviousDigest: optional(string()),\n\tepochRollingGasCostSummary: GasCostSummary,\n\ttimestampMs: string(),\n\tendOfEpochData: optional(EndOfEpochData),\n\tvalidatorSignature: string(),\n\ttransactions: array(string()),\n\tcheckpointCommitments: array(CheckpointCommitment),\n});\nexport type Checkpoint = Infer<typeof Checkpoint>;\n\nexport const CheckpointPage = object({\n\tdata: array(Checkpoint),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\nexport type CheckpointPage = Infer<typeof CheckpointPage>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,yBAUO;AAEA,MAAM,qBAAiB,2BAAO;AAAA,EACpC,qBAAiB,2BAAO;AAAA,EACxB,iBAAa,2BAAO;AAAA,EACpB,mBAAe,2BAAO;AAAA,EACtB,6BAAyB,2BAAO;AACjC,CAAC;AAIM,MAAM,+BAA2B,2BAAO;AAKxC,MAAM,uBAAmB,2BAAO;AAIhC,MAAM,8BAA0B,2BAAO;AAAA,EAC7C,YAAQ,8BAAM,2BAAO,CAAC;AACvB,CAAC;AAGM,MAAM,2BAAuB,wBAAI;AAIjC,MAAM,yBAAqB,2BAAO;AAIlC,MAAM,qBAAiB,2BAAO;AAAA,EACpC,wBAAoB,8BAAM,0BAAM,KAAC,2BAAO,OAAG,2BAAO,CAAC,CAAC,CAAC;AAAA,EACrD,8BAA0B,2BAAO;AAAA,EACjC,sBAAkB,0BAAM,oBAAoB;AAC7C,CAAC;AAGM,MAAM,uBAAmB,2BAAO;AAAA,EACtC,iBAAa,2BAAO;AAAA,EACpB,aAAS,2BAAO;AACjB,CAAC;AAEM,MAAM,iBAAa,2BAAO;AAAA,EAChC,WAAO,2BAAO;AAAA,EACd,oBAAgB,2BAAO;AAAA,EACvB,YAAQ,2BAAO;AAAA,EACf,8BAA0B,2BAAO;AAAA,EACjC,oBAAgB,iCAAS,2BAAO,CAAC;AAAA,EACjC,4BAA4B;AAAA,EAC5B,iBAAa,2BAAO;AAAA,EACpB,oBAAgB,6BAAS,cAAc;AAAA,EACvC,wBAAoB,2BAAO;AAAA,EAC3B,kBAAc,8BAAM,2BAAO,CAAC;AAAA,EAC5B,2BAAuB,0BAAM,oBAAoB;AAClD,CAAC;AAGM,MAAM,qBAAiB,2BAAO;AAAA,EACpC,UAAM,0BAAM,UAAU;AAAA,EACtB,gBAAY,iCAAS,2BAAO,CAAC;AAAA,EAC7B,iBAAa,4BAAQ;AACtB,CAAC;",
  "names": []
}
