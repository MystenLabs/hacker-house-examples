{
  "version": 3,
  "sources": ["../../../src/client/http-transport.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport type { WebsocketClientOptions } from '../rpc/websocket-client.js';\nimport { WebsocketClient } from '../rpc/websocket-client.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\ninterface SuiHTTPTransportOptions {\n\turl: string;\n\trpc?: {\n\t\theaders?: HttpHeaders;\n\t\turl?: string;\n\t};\n\twebsocket?: WebsocketClientOptions & {\n\t\turl?: string;\n\t};\n}\n\nexport interface SuiTransportRequestOptions {\n\tmethod: string;\n\tparams: unknown[];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport interface SuiTransportSubscribeOptions<T> {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: unknown[];\n\tonMessage: (event: T) => void;\n}\n\nexport interface SuiTransport {\n\trequest<T = unknown>(input: SuiTransportRequestOptions): Promise<T>;\n\tsubscribe<T = unknown>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>>;\n}\n\nexport class SuiHTTPTransport implements SuiTransport {\n\tprivate rpcClient: Client;\n\tprivate websocketClient: WebsocketClient;\n\n\tconstructor({\n\t\turl,\n\t\twebsocket: { url: websocketUrl, ...websocketOptions } = {},\n\t\trpc,\n\t}: SuiHTTPTransportOptions) {\n\t\tconst transport = new HTTPTransport(rpc?.url ?? url, {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t...rpc?.headers,\n\t\t\t},\n\t\t});\n\n\t\tthis.rpcClient = new Client(new RequestManager([transport]));\n\t\tthis.websocketClient = new WebsocketClient(websocketUrl ?? url, websocketOptions);\n\t}\n\n\tasync request<T>(input: SuiTransportRequestOptions): Promise<T> {\n\t\treturn await this.rpcClient.request(input);\n\t}\n\n\tasync subscribe<T>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>> {\n\t\tconst unsubscribe = await this.websocketClient.request(input);\n\n\t\treturn async () => !!(await unsubscribe());\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,uBAAsD;AACtD,qBAAsD;AAEtD,8BAAgC;AAqCzB,MAAM,iBAAyC;AAAA,EAIrD,YAAY;AAAA,IACX;AAAA,IACA,WAAW,EAAE,KAAK,cAAc,GAAG,iBAAiB,IAAI,CAAC;AAAA,IACzD;AAAA,EACD,GAA4B;AAC3B,UAAM,YAAY,IAAI,+BAAc,KAAK,OAAO,KAAK;AAAA,MACpD,SAAS;AAAA,QACR,gBAAgB;AAAA,QAChB,mBAAmB;AAAA,QACnB,sBAAsB;AAAA,QACtB,6BAA6B;AAAA,QAC7B,GAAG,KAAK;AAAA,MACT;AAAA,IACD,CAAC;AAED,SAAK,YAAY,IAAI,wBAAO,IAAI,gCAAe,CAAC,SAAS,CAAC,CAAC;AAC3D,SAAK,kBAAkB,IAAI,wCAAgB,gBAAgB,KAAK,gBAAgB;AAAA,EACjF;AAAA,EAEA,MAAM,QAAW,OAA+C;AAC/D,WAAO,MAAM,KAAK,UAAU,QAAQ,KAAK;AAAA,EAC1C;AAAA,EAEA,MAAM,UAAa,OAAyE;AAC3F,UAAM,cAAc,MAAM,KAAK,gBAAgB,QAAQ,KAAK;AAE5D,WAAO,YAAY,CAAC,CAAE,MAAM,YAAY;AAAA,EACzC;AACD;",
  "names": []
}
