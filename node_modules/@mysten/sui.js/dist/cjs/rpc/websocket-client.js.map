{
  "version": 3,
  "sources": ["../../../src/rpc/websocket-client.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, Client, WebSocketTransport } from '@open-rpc/client-js';\n\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\tif (port) {\n\t\turl.port = port.toString();\n\t}\n\treturn url.toString();\n};\n\ntype NotificationMessageParams = {\n\tsubscription: number;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tid?: number;\n\tinitialId?: number;\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout?: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout?: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects?: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS = {\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n} satisfies WebsocketClientOptions;\n\nexport class WebsocketClient {\n\tendpoint: string;\n\toptions: Required<WebsocketClientOptions>;\n\t#client: Client | null;\n\t#subscriptions: Map<number, SubscriptionRequest & { id: number }>;\n\t#disconnects: number;\n\n\tconstructor(endpoint: string, options: WebsocketClientOptions = {}) {\n\t\tthis.endpoint = endpoint;\n\t\tthis.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\n\t\tthis.#client = null;\n\t\tthis.#subscriptions = new Map();\n\t\tthis.#disconnects = 0;\n\t}\n\n\t#setupClient() {\n\t\tif (this.#client) {\n\t\t\treturn this.#client;\n\t\t}\n\n\t\tconst transport = new WebSocketTransport(this.endpoint);\n\t\tconst requestManager = new RequestManager([transport]);\n\t\tthis.#client = new Client(requestManager);\n\n\t\ttransport.connection.addEventListener('open', () => {\n\t\t\tthis.#disconnects = 0;\n\t\t});\n\n\t\ttransport.connection.addEventListener('close', () => {\n\t\t\tthis.#disconnects++;\n\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.#reconnect();\n\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t}\n\t\t});\n\n\t\tthis.#client.onNotification((data) => {\n\t\t\tconst params = data.params as NotificationMessageParams;\n\n\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\tif (subscription.method === data.method && params.subscription === subscription.id) {\n\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#client;\n\t}\n\n\t#reconnect() {\n\t\tthis.#client?.close();\n\t\tthis.#client = null;\n\n\t\tthis.#subscriptions.forEach((subscription) => this.request(subscription));\n\t}\n\n\tasync request<T>(input: SubscriptionRequest<T>) {\n\t\tconst client = this.#setupClient();\n\t\tconst id = await client.request(\n\t\t\t{ method: input.method, params: input.params },\n\t\t\tthis.options.callTimeout,\n\t\t);\n\t\tconst initialId = input.initialId || id;\n\t\tthis.#subscriptions.set(initialId, {\n\t\t\t...input,\n\t\t\t// Always set the latest actual subscription ID:\n\t\t\tid,\n\t\t\tinitialId,\n\t\t});\n\n\t\treturn async () => {\n\t\t\tconst client = this.#setupClient();\n\t\t\t// NOTE: Due to reconnects, the inner subscription ID could have actually changed:\n\t\t\tconst subscription = this.#subscriptions.get(initialId);\n\t\t\tif (!subscription) return false;\n\n\t\t\tthis.#subscriptions.delete(initialId);\n\n\t\t\treturn client.request(\n\t\t\t\t{ method: input.unsubscribe, params: [subscription.id] },\n\t\t\t\tthis.options.callTimeout,\n\t\t\t);\n\t\t};\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,uBAA2D;AAH3D;AAKO,MAAM,kBAAkB,CAAC,SAAiB,SAA0B;AAC1E,QAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,MAAI,WAAW,IAAI,SAAS,QAAQ,QAAQ,IAAI;AAChD,MAAI,MAAM;AACT,QAAI,OAAO,KAAK,SAAS;AAAA,EAC1B;AACA,SAAO,IAAI,SAAS;AACrB;AAkCO,MAAM,yBAAyB;AAAA,EACrC,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,eAAe;AAChB;AAEO,MAAM,gBAAgB;AAAA,EAO5B,YAAY,UAAkB,UAAkC,CAAC,GAAG;AAapE;AAmCA;AApDA;AACA;AACA;AAGC,SAAK,WAAW;AAChB,SAAK,UAAU,EAAE,GAAG,wBAAwB,GAAG,QAAQ;AAEvD,QAAI,KAAK,SAAS,WAAW,MAAM,GAAG;AACrC,WAAK,WAAW,gBAAgB,KAAK,QAAQ;AAAA,IAC9C;AAEA,uBAAK,SAAU;AACf,uBAAK,gBAAiB,oBAAI,IAAI;AAC9B,uBAAK,cAAe;AAAA,EACrB;AAAA,EA4CA,MAAM,QAAW,OAA+B;AAC/C,UAAM,SAAS,sBAAK,8BAAL;AACf,UAAM,KAAK,MAAM,OAAO;AAAA,MACvB,EAAE,QAAQ,MAAM,QAAQ,QAAQ,MAAM,OAAO;AAAA,MAC7C,KAAK,QAAQ;AAAA,IACd;AACA,UAAM,YAAY,MAAM,aAAa;AACrC,uBAAK,gBAAe,IAAI,WAAW;AAAA,MAClC,GAAG;AAAA;AAAA,MAEH;AAAA,MACA;AAAA,IACD,CAAC;AAED,WAAO,YAAY;AAClB,YAAMA,UAAS,sBAAK,8BAAL;AAEf,YAAM,eAAe,mBAAK,gBAAe,IAAI,SAAS;AACtD,UAAI,CAAC;AAAc,eAAO;AAE1B,yBAAK,gBAAe,OAAO,SAAS;AAEpC,aAAOA,QAAO;AAAA,QACb,EAAE,QAAQ,MAAM,aAAa,QAAQ,CAAC,aAAa,EAAE,EAAE;AAAA,QACvD,KAAK,QAAQ;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAvFC;AACA;AACA;AAeA;AAAA,iBAAY,WAAG;AACd,MAAI,mBAAK,UAAS;AACjB,WAAO,mBAAK;AAAA,EACb;AAEA,QAAM,YAAY,IAAI,oCAAmB,KAAK,QAAQ;AACtD,QAAM,iBAAiB,IAAI,gCAAe,CAAC,SAAS,CAAC;AACrD,qBAAK,SAAU,IAAI,wBAAO,cAAc;AAExC,YAAU,WAAW,iBAAiB,QAAQ,MAAM;AACnD,uBAAK,cAAe;AAAA,EACrB,CAAC;AAED,YAAU,WAAW,iBAAiB,SAAS,MAAM;AACpD,2BAAK,cAAL;AACA,QAAI,mBAAK,iBAAgB,KAAK,QAAQ,eAAe;AACpD,iBAAW,MAAM;AAChB,8BAAK,0BAAL;AAAA,MACD,GAAG,KAAK,QAAQ,gBAAgB;AAAA,IACjC;AAAA,EACD,CAAC;AAED,qBAAK,SAAQ,eAAe,CAAC,SAAS;AACrC,UAAM,SAAS,KAAK;AAEpB,uBAAK,gBAAe,QAAQ,CAAC,iBAAiB;AAC7C,UAAI,aAAa,WAAW,KAAK,UAAU,OAAO,iBAAiB,aAAa,IAAI;AACnF,qBAAa,UAAU,OAAO,MAAM;AAAA,MACrC;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,SAAO,mBAAK;AACb;AAEA;AAAA,eAAU,WAAG;AACZ,qBAAK,UAAS,MAAM;AACpB,qBAAK,SAAU;AAEf,qBAAK,gBAAe,QAAQ,CAAC,iBAAiB,KAAK,QAAQ,YAAY,CAAC;AACzE;",
  "names": ["client"]
}
