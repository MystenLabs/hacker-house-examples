{
  "version": 3,
  "sources": ["../../../src/utils/verify.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { IntentScope } from '../cryptography/intent.js';\nimport { messageWithIntent } from '../cryptography/intent.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { toSingleSignaturePubkeyPair } from '../cryptography/utils.js';\nimport { bcs } from '../bcs/index.js';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the Sui.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with the expected scope. */\nexport async function verifyMessage(\n\tmessage: Uint8Array | string,\n\tserializedSignature: SerializedSignature,\n\tscope: IntentScope,\n) {\n\tconst signature = toSingleSignaturePubkeyPair(serializedSignature);\n\n\tif (scope === IntentScope.PersonalMessage) {\n\t\tconst messageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\tbcs.ser(['vector', 'u8'], typeof message === 'string' ? fromB64(message) : message).toBytes(),\n\t\t);\n\n\t\tif (await signature.pubKey.verify(blake2b(messageBytes, { dkLen: 32 }), signature.signature)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Fallback for backwards compatibility, old versions of the SDK\n\t\t// did not properly wrap PersonalMessages in a PersonalMessage bcs Struct\n\t\tconst unwrappedMessageBytes = messageWithIntent(\n\t\t\tscope,\n\t\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t\t);\n\n\t\treturn signature.pubKey.verify(\n\t\t\tblake2b(unwrappedMessageBytes, { dkLen: 32 }),\n\t\t\tsignature.signature,\n\t\t);\n\t}\n\n\tconst messageBytes = messageWithIntent(\n\t\tscope,\n\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t);\n\n\treturn signature.pubKey.verify(blake2b(messageBytes, { dkLen: 32 }), signature.signature);\n}\n"],
  "mappings": "AAGA,SAAS,eAAe;AACxB,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB;AAElC,SAAS,eAAe;AACxB,SAAS,mCAAmC;AAC5C,SAAS,WAAW;AAOpB,eAAsB,cACrB,SACA,qBACA,OACC;AACD,QAAM,YAAY,4BAA4B,mBAAmB;AAEjE,MAAI,UAAU,YAAY,iBAAiB;AAC1C,UAAMA,gBAAe;AAAA,MACpB;AAAA,MACA,IAAI,IAAI,CAAC,UAAU,IAAI,GAAG,OAAO,YAAY,WAAW,QAAQ,OAAO,IAAI,OAAO,EAAE,QAAQ;AAAA,IAC7F;AAEA,QAAI,MAAM,UAAU,OAAO,OAAO,QAAQA,eAAc,EAAE,OAAO,GAAG,CAAC,GAAG,UAAU,SAAS,GAAG;AAC7F,aAAO;AAAA,IACR;AAIA,UAAM,wBAAwB;AAAA,MAC7B;AAAA,MACA,OAAO,YAAY,WAAW,QAAQ,OAAO,IAAI;AAAA,IAClD;AAEA,WAAO,UAAU,OAAO;AAAA,MACvB,QAAQ,uBAAuB,EAAE,OAAO,GAAG,CAAC;AAAA,MAC5C,UAAU;AAAA,IACX;AAAA,EACD;AAEA,QAAM,eAAe;AAAA,IACpB;AAAA,IACA,OAAO,YAAY,WAAW,QAAQ,OAAO,IAAI;AAAA,EAClD;AAEA,SAAO,UAAU,OAAO,OAAO,QAAQ,cAAc,EAAE,OAAO,GAAG,CAAC,GAAG,UAAU,SAAS;AACzF;",
  "names": ["messageBytes"]
}
