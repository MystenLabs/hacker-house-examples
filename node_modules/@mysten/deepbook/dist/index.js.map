{"version":3,"sources":["../src/index.ts","../src/client.ts","../src/utils/constants.ts","../src/types/bcs.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport * from './client';\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { OrderArguments, PaginatedEvents, PaginationArguments } from '@mysten/sui.js/client';\nimport {\n\tSUI_CLOCK_OBJECT_ID,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n} from '@mysten/sui.js/utils';\nimport { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client';\nimport { TransactionBlock } from '@mysten/sui.js/transactions';\nimport {\n\tMODULE_CLOB,\n\tPACKAGE_ID,\n\tNORMALIZED_SUI_COIN_TYPE,\n\tCREATION_FEE,\n\tMODULE_CUSTODIAN,\n\tORDER_DEFAULT_EXPIRATION_IN_MS,\n} from './utils';\nimport {\n\tLevel2BookStatusPoint,\n\tLimitOrderType,\n\tMarketPrice,\n\tOrder,\n\tPaginatedPoolSummary,\n\tPoolSummary,\n\tSelfMatchingPreventionStyle,\n\tUserPosition,\n\tbcs,\n} from './types';\nimport { Coin } from '@mysten/sui.js';\n\nconst DUMMY_ADDRESS = normalizeSuiAddress('0x0');\n\nexport class DeepBookClient {\n\t#poolTypeArgsCache: Map<string, string[]> = new Map();\n\t/**\n\t *\n\t * @param suiClient connection to fullnode\n\t * @param accountCap (optional) only required for wrting operations\n\t * @param currentAddress (optional) address of the current user (default: DUMMY_ADDRESS)\n\t */\n\tconstructor(\n\t\tpublic suiClient: SuiClient = new SuiClient({ url: getFullnodeUrl('testnet') }),\n\t\tpublic accountCap: string | undefined = undefined,\n\t\tpublic currentAddress: string = DUMMY_ADDRESS,\n\t\tprivate clientOrderId: number = 0,\n\t) {}\n\n\t/**\n\t * @param cap set the account cap for interacting with DeepBook\n\t */\n\tasync setAccountCap(cap: string) {\n\t\tthis.accountCap = cap;\n\t}\n\n\t/**\n\t * @description: Create pool for trading pair\n\t * @param baseAssetType Full coin type of the base asset, eg: \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\"\n\t * @param quoteAssetType Full coin type of quote asset, eg: \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT\"\n\t * @param tickSize Minimal Price Change Accuracy of this pool, eg: 10000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.\n\t * @param lotSize Minimal Lot Change Accuracy of this pool, eg: 10000.\n\t */\n\tcreatePool(\n\t\tbaseAssetType: string,\n\t\tquoteAssetType: string,\n\t\ttickSize: bigint,\n\t\tlotSize: bigint,\n\t): TransactionBlock {\n\t\tconst txb = new TransactionBlock();\n\t\t// create a pool with CREATION_FEE\n\t\tconst [coin] = txb.splitCoins(txb.gas, [txb.pure(CREATION_FEE)]);\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: [baseAssetType, quoteAssetType],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::create_pool`,\n\t\t\targuments: [txb.pure(tickSize), txb.pure(lotSize), coin],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: Create pool for trading pair\n\t * @param baseAssetType Full coin type of the base asset, eg: \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC\"\n\t * @param quoteAssetType Full coin type of quote asset, eg: \"0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT\"\n\t * @param tickSize Minimal Price Change Accuracy of this pool, eg: 10000000. The number must be an interger float scaled by `FLOAT_SCALING_FACTOR`.\n\t * @param lotSize Minimal Lot Change Accuracy of this pool, eg: 10000.\n\t * @param takerFeeRate Customized taker fee rate, float scaled by `FLOAT_SCALING_FACTOR`, Taker_fee_rate of 0.25% should be 2_500_000 for example\n\t * @param makerRebateRate Customized maker rebate rate, float scaled by `FLOAT_SCALING_FACTOR`,  should be less than or equal to the taker_rebate_rate\n\t */\n\tcreateCustomizedPool(\n\t\tbaseAssetType: string,\n\t\tquoteAssetType: string,\n\t\ttickSize: bigint,\n\t\tlotSize: bigint,\n\t\ttakerFeeRate: bigint,\n\t\tmakerRebateRate: bigint,\n\t): TransactionBlock {\n\t\tconst txb = new TransactionBlock();\n\t\t// create a pool with CREATION_FEE\n\t\tconst [coin] = txb.splitCoins(txb.gas, [txb.pure(CREATION_FEE)]);\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: [baseAssetType, quoteAssetType],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::create_customized_pool`,\n\t\t\targuments: [\n\t\t\t\ttxb.pure(tickSize),\n\t\t\t\ttxb.pure(lotSize),\n\t\t\t\ttxb.pure(takerFeeRate),\n\t\t\t\ttxb.pure(makerRebateRate),\n\t\t\t\tcoin,\n\t\t\t],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: Create and Transfer custodian account to user\n\t * @param currentAddress: current user address, eg: \"0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966\"\n\t */\n\tcreateAccount(currentAddress: string = this.currentAddress): TransactionBlock {\n\t\tconst txb = new TransactionBlock();\n\t\tlet [cap] = txb.moveCall({\n\t\t\ttypeArguments: [],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::create_account`,\n\t\t\targuments: [],\n\t\t});\n\t\ttxb.transferObjects([cap], txb.pure(this.#checkAddress(currentAddress)));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: Create and Transfer custodian account to user\n\t * @param currentAddress: current user address, eg: \"0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966\"\n\t * @param accountCap: Object id of Account Capacity under user address, created after invoking createAccount, eg: \"0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3\"\n\t */\n\tcreateChildAccountCap(\n\t\tcurrentAddress: string = this.currentAddress,\n\t\taccountCap: string | undefined = this.accountCap,\n\t): TransactionBlock {\n\t\tconst txb = new TransactionBlock();\n\t\tlet [childCap] = txb.moveCall({\n\t\t\ttypeArguments: [],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CUSTODIAN}::create_child_account_cap`,\n\t\t\targuments: [txb.object(this.#checkAccountCap(accountCap))],\n\t\t});\n\t\ttxb.transferObjects([childCap], txb.pure(this.#checkAddress(currentAddress)));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description construct transaction block for depositing asset into a pool.\n\t * @param poolId the pool id for the deposit\n\t * @param coinId the coin used for the deposit. You can omit this argument if you are depositing SUI, in which case\n\t * gas coin will be used\n\t * @param amount the amount of coin to deposit. If omitted, the entire balance of the coin will be deposited\n\t */\n\tasync deposit(\n\t\tpoolId: string,\n\t\tcoinId: string | undefined = undefined,\n\t\tquantity: bigint | undefined = undefined,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\n\t\tconst [baseAsset, quoteAsset] = await this.getPoolTypeArgs(poolId);\n\t\tconst hasSui =\n\t\t\tbaseAsset === NORMALIZED_SUI_COIN_TYPE || quoteAsset === NORMALIZED_SUI_COIN_TYPE;\n\n\t\tif (coinId === undefined && !hasSui) {\n\t\t\tthrow new Error('coinId must be specified if neither baseAsset nor quoteAsset is SUI');\n\t\t}\n\n\t\tconst inputCoin = coinId ? txb.object(coinId) : txb.gas;\n\n\t\tconst [coin] = quantity ? txb.splitCoins(inputCoin, [txb.pure(quantity)]) : [inputCoin];\n\n\t\tconst coinType = coinId ? await this.#getCoinType(coinId) : NORMALIZED_SUI_COIN_TYPE;\n\t\tif (coinType !== baseAsset && coinType !== quoteAsset) {\n\t\t\tthrow new Error(\n\t\t\t\t`coin ${coinId} of ${coinType} type is not a valid asset for pool ${poolId}, which supports ${baseAsset} and ${quoteAsset}`,\n\t\t\t);\n\t\t}\n\t\tconst functionName = coinType === baseAsset ? 'deposit_base' : 'deposit_quote';\n\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: [baseAsset, quoteAsset],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::${functionName}`,\n\t\t\targuments: [txb.object(poolId), coin, txb.object(this.#checkAccountCap())],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description construct transaction block for withdrawing asset from a pool.\n\t * @param poolId the pool id for the withdraw\n\t * @param amount the amount of coin to withdraw\n\t * @param assetType Base or Quote\n\t * @param recipientAddress the address to receive the withdrawn asset. If omitted, `this.currentAddress` will be used. The function\n\t * will throw if the `recipientAddress === DUMMY_ADDRESS`\n\t */\n\tasync withdraw(\n\t\tpoolId: string,\n\t\t// TODO: implement withdraw all\n\t\tquantity: bigint,\n\t\tassetType: 'base' | 'quote',\n\t\trecipientAddress: string = this.currentAddress,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst functionName = assetType === 'base' ? 'withdraw_base' : 'withdraw_quote';\n\t\tconst [withdraw] = txb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::${functionName}`,\n\t\t\targuments: [txb.object(poolId), txb.pure(quantity), txb.object(this.#checkAccountCap())],\n\t\t});\n\t\ttxb.transferObjects([withdraw], txb.pure(this.#checkAddress(recipientAddress)));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: place a limit order\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param price: price of the limit order. The number must be an interger float scaled by `FLOAT_SCALING_FACTOR`.\n\t * @param quantity: quantity of the limit order in BASE ASSET, eg: 100000000.\n\t * @param orderType: bid for buying base with quote, ask for selling base for quote\n\t * @param expirationTimestamp: expiration timestamp of the limit order in ms, eg: 1620000000000. If omitted, the order will expire in 1 day\n\t * from the time this function is called(not the time the transaction is executed)\n\t * @param restriction restrictions on limit orders, explain in doc for more details, eg: 0\n\t * @param clientOrderId a client side defined order number for bookkeeping purpose, e.g., \"1\", \"2\", etc. If omitted, the sdk will\n\t * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances\n\t * @param selfMatchingPrevention: Options for self-match prevention. Right now only support `CANCEL_OLDEST`\n\t */\n\tasync placeLimitOrder(\n\t\tpoolId: string,\n\t\tprice: bigint,\n\t\tquantity: bigint,\n\t\torderType: 'bid' | 'ask',\n\t\texpirationTimestamp: number = Date.now() + ORDER_DEFAULT_EXPIRATION_IN_MS,\n\t\trestriction: LimitOrderType = LimitOrderType.NO_RESTRICTION,\n\t\tclientOrderId: string | undefined = undefined,\n\t\tselfMatchingPrevention: SelfMatchingPreventionStyle = SelfMatchingPreventionStyle.CANCEL_OLDEST,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst args = [\n\t\t\ttxb.object(poolId),\n\t\t\ttxb.pure(clientOrderId ?? this.#nextClientOrderId()),\n\t\t\ttxb.pure(price),\n\t\t\ttxb.pure(quantity),\n\t\t\ttxb.pure(selfMatchingPrevention),\n\t\t\ttxb.pure(orderType === 'bid'),\n\t\t\ttxb.pure(expirationTimestamp),\n\t\t\ttxb.pure(restriction),\n\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\ttxb.object(this.#checkAccountCap()),\n\t\t];\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::place_limit_order`,\n\t\t\targuments: args,\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: place a market order\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param quantity Amount of quote asset to swap in base asset\n\t * @param orderType bid for buying base with quote, ask for selling base for quote\n\t * @param baseCoin the objectId of the base coin\n\t * @param quoteCoin the objectId of the quote coin\n\t * @param clientOrderId a client side defined order id for bookkeeping purpose. eg: \"1\" , \"2\", ... If omitted, the sdk will\n\t * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances\n\t * @param recipientAddress: address to return the unused amounts, eg: \"0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966\"\n\t */\n\tasync placeMarketOrder(\n\t\tpoolId: string,\n\t\tquantity: bigint,\n\t\torderType: 'bid' | 'ask',\n\t\tbaseCoin: string | undefined = undefined,\n\t\tquoteCoin: string | undefined = undefined,\n\t\tclientOrderId: string | undefined = undefined,\n\t\trecipientAddress: string = this.currentAddress,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst [baseAssetType, quoteAssetType] = await this.getPoolTypeArgs(poolId);\n\t\tif (!baseCoin && orderType === 'ask') {\n\t\t\tthrow new Error('Must specify a valid base coin for an ask order');\n\t\t} else if (!quoteCoin && orderType === 'bid') {\n\t\t\tthrow new Error('Must specify a valid quote coin for a bid order');\n\t\t}\n\t\tconst emptyCoin = txb.moveCall({\n\t\t\ttypeArguments: [baseCoin ? quoteAssetType : baseAssetType],\n\t\t\ttarget: `0x2::coin::zero`,\n\t\t\targuments: [],\n\t\t});\n\t\tconst [base_coin_ret, quote_coin_ret] = txb.moveCall({\n\t\t\ttypeArguments: [baseAssetType, quoteAssetType],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::place_market_order`,\n\t\t\targuments: [\n\t\t\t\ttxb.object(poolId),\n\t\t\t\ttxb.object(this.#checkAccountCap()),\n\t\t\t\ttxb.pure(clientOrderId ?? this.#nextClientOrderId()),\n\t\t\t\ttxb.pure(quantity),\n\t\t\t\ttxb.pure(orderType === 'bid'),\n\t\t\t\tbaseCoin ? txb.object(baseCoin) : emptyCoin,\n\t\t\t\tquoteCoin ? txb.object(quoteCoin) : emptyCoin,\n\t\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\t],\n\t\t});\n\t\tconst recipient = this.#checkAddress(recipientAddress);\n\t\ttxb.transferObjects([base_coin_ret], txb.pure(recipient));\n\t\ttxb.transferObjects([quote_coin_ret], txb.pure(recipient));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: swap exact quote for base\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param tokenObjectIn: Object id of the token to swap: eg: \"0x6e566fec4c388eeb78a7dab832c9f0212eb2ac7e8699500e203def5b41b9c70d\"\n\t * @param amountIn: amount of token to buy or sell, eg: 10000000.\n\t * @param currentAddress: current user address, eg: \"0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966\"\n\t * @param clientOrderId a client side defined order id for bookkeeping purpose, eg: \"1\" , \"2\", ... If omitted, the sdk will\n\t * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances\n\t */\n\tasync swapExactQuoteForBase(\n\t\tpoolId: string,\n\t\ttokenObjectIn: string,\n\t\tamountIn: bigint,\n\t\tcurrentAddress: string,\n\t\tclientOrderId: string | undefined = undefined,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\t// in this case, we assume that the tokenIn--tokenOut always exists.\n\t\tconst [base_coin_ret, quote_coin_ret, _amount] = txb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::swap_exact_quote_for_base`,\n\t\t\targuments: [\n\t\t\t\ttxb.object(poolId),\n\t\t\t\ttxb.pure(clientOrderId ?? this.#nextClientOrderId()),\n\t\t\t\ttxb.object(this.#checkAccountCap()),\n\t\t\t\ttxb.object(String(amountIn)),\n\t\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\t\ttxb.object(tokenObjectIn),\n\t\t\t],\n\t\t});\n\t\ttxb.transferObjects([base_coin_ret], txb.pure(currentAddress));\n\t\ttxb.transferObjects([quote_coin_ret], txb.pure(currentAddress));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description swap exact base for quote\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param tokenObjectIn Object id of the token to swap: eg: \"0x6e566fec4c388eeb78a7dab832c9f0212eb2ac7e8699500e203def5b41b9c70d\"\n\t * @param amountIn amount of token to buy or sell, eg: 10000000\n\t * @param currentAddress current user address, eg: \"0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966\"\n\t * @param clientOrderId a client side defined order number for bookkeeping purpose. eg: \"1\" , \"2\", ...\n\t */\n\tasync swapExactBaseForQuote(\n\t\tpoolId: string,\n\t\ttokenObjectIn: string,\n\t\tamountIn: bigint,\n\t\tcurrentAddress: string,\n\t\tclientOrderId: string | undefined = undefined,\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst [baseAsset, quoteAsset] = await this.getPoolTypeArgs(poolId);\n\t\t// in this case, we assume that the tokenIn--tokenOut always exists.\n\t\tconst [base_coin_ret, quote_coin_ret, _amount] = txb.moveCall({\n\t\t\ttypeArguments: [baseAsset, quoteAsset],\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::swap_exact_base_for_quote`,\n\t\t\targuments: [\n\t\t\t\ttxb.object(poolId),\n\t\t\t\ttxb.pure(clientOrderId ?? this.#nextClientOrderId()),\n\t\t\t\ttxb.object(this.#checkAccountCap()),\n\t\t\t\ttxb.object(String(amountIn)),\n\t\t\t\ttxb.object(tokenObjectIn),\n\t\t\t\ttxb.moveCall({\n\t\t\t\t\ttypeArguments: [quoteAsset],\n\t\t\t\t\ttarget: `0x2::coin::zero`,\n\t\t\t\t\targuments: [],\n\t\t\t\t}),\n\t\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\t],\n\t\t});\n\t\ttxb.transferObjects([base_coin_ret], txb.pure(currentAddress));\n\t\ttxb.transferObjects([quote_coin_ret], txb.pure(currentAddress));\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: cancel an order\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param orderId orderId of a limit order, you can find them through function query.list_open_orders eg: \"0\"\n\t */\n\tasync cancelOrder(poolId: string, orderId: string): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::cancel_order`,\n\t\t\targuments: [txb.object(poolId), txb.pure(orderId), txb.object(this.#checkAccountCap())],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: Cancel all limit orders under a certain account capacity\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t */\n\tasync cancelAllOrders(poolId: string): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::cancel_all_orders`,\n\t\t\targuments: [txb.object(poolId), txb.object(this.#checkAccountCap())],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description: batch cancel order\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param orderIds array of order ids you want to cancel, you can find your open orders by query.list_open_orders eg: [\"0\", \"1\", \"2\"]\n\t */\n\tasync batchCancelOrder(poolId: string, orderIds: string[]): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::batch_cancel_order`,\n\t\t\targuments: [txb.object(poolId), txb.pure(orderIds), txb.object(this.#checkAccountCap())],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @param poolId Object id of pool, created after invoking createPool, eg: \"0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\"\n\t * @param orderIds array of expired order ids to clean, eg: [\"0\", \"1\", \"2\"]\n\t * @param orderOwners array of Order owners, should be the owner addresses from the account capacities which placed the orders\n\t */\n\tasync cleanUpExpiredOrders(\n\t\tpoolId: string,\n\t\torderIds: string[],\n\t\torderOwners: string[],\n\t): Promise<TransactionBlock> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::clean_up_expired_orders`,\n\t\t\targuments: [\n\t\t\t\ttxb.object(poolId),\n\t\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\t\ttxb.pure(orderIds),\n\t\t\t\ttxb.pure(orderOwners),\n\t\t\t],\n\t\t});\n\t\treturn txb;\n\t}\n\n\t/**\n\t * @description returns paginated list of pools created in DeepBook by querying for the\n\t * `PoolCreated` event. Warning: this method can return incomplete results if the upstream data source\n\t * is pruned.\n\t */\n\tasync getAllPools(\n\t\tinput: PaginationArguments<PaginatedEvents['nextCursor']> & OrderArguments,\n\t): Promise<PaginatedPoolSummary> {\n\t\tconst resp = await this.suiClient.queryEvents({\n\t\t\tquery: { MoveEventType: `${PACKAGE_ID}::${MODULE_CLOB}::PoolCreated` },\n\t\t\t...input,\n\t\t});\n\t\tconst pools = resp.data.map((event) => {\n\t\t\tconst rawEvent = event.parsedJson as any;\n\t\t\treturn {\n\t\t\t\tpoolId: rawEvent.pool_id as string,\n\t\t\t\tbaseAsset: normalizeStructTag(rawEvent.base_asset.name),\n\t\t\t\tquoteAsset: normalizeStructTag(rawEvent.quote_asset.name),\n\t\t\t};\n\t\t});\n\t\treturn {\n\t\t\tdata: pools,\n\t\t\tnextCursor: resp.nextCursor,\n\t\t\thasNextPage: resp.hasNextPage,\n\t\t};\n\t}\n\n\t/**\n\t * @description Fetch metadata for a pool\n\t * @param poolId object id of the pool\n\t * @returns Metadata for the Pool\n\t */\n\tasync getPoolInfo(poolId: string): Promise<PoolSummary> {\n\t\tconst resp = await this.suiClient.getObject({\n\t\t\tid: poolId,\n\t\t\toptions: { showContent: true },\n\t\t});\n\t\tif (resp?.data?.content?.dataType !== 'moveObject') {\n\t\t\tthrow new Error(`pool ${poolId} does not exist`);\n\t\t}\n\n\t\tconst [baseAsset, quoteAsset] = parseStructTag(resp!.data!.content!.type).typeParams.map((t) =>\n\t\t\tnormalizeStructTag(t),\n\t\t);\n\n\t\treturn {\n\t\t\tpoolId,\n\t\t\tbaseAsset,\n\t\t\tquoteAsset,\n\t\t};\n\t}\n\n\tasync getPoolTypeArgs(poolId: string): Promise<string[]> {\n\t\tif (!this.#poolTypeArgsCache.has(poolId)) {\n\t\t\tconst { baseAsset, quoteAsset } = await this.getPoolInfo(poolId);\n\t\t\tconst typeArgs = [baseAsset, quoteAsset];\n\t\t\tthis.#poolTypeArgsCache.set(poolId, typeArgs);\n\t\t}\n\n\t\treturn this.#poolTypeArgsCache.get(poolId)!;\n\t}\n\n\t/**\n\t * @description get the order status\n\t * @param poolId: the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\n\t * @param orderId the order id, eg: \"1\"\n\t */\n\tasync getOrderStatus(\n\t\tpoolId: string,\n\t\torderId: string,\n\t\taccountCap: string | undefined = this.accountCap,\n\t): Promise<Order | undefined> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst cap = this.#checkAccountCap(accountCap);\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::get_order_status`,\n\t\t\targuments: [txb.object(poolId), txb.object(orderId), txb.object(cap)],\n\t\t});\n\t\tconst results = (\n\t\t\tawait this.suiClient.devInspectTransactionBlock({\n\t\t\t\ttransactionBlock: txb,\n\t\t\t\tsender: this.currentAddress,\n\t\t\t})\n\t\t).results;\n\n\t\tif (!results) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn bcs.de('Order', Uint8Array.from(results![0].returnValues![0][0]));\n\t}\n\n\t/**\n\t * @description: get the base and quote token in custodian account\n\t * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\n\t * @param accountCap your accountCap, eg: 0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3. If not provided, `this.accountCap` will be used.\n\t */\n\tasync getUserPosition(\n\t\tpoolId: string,\n\t\taccountCap: string | undefined = undefined,\n\t): Promise<UserPosition> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst cap = this.#checkAccountCap(accountCap);\n\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::account_balance`,\n\t\t\targuments: [txb.object(normalizeSuiObjectId(poolId)), txb.object(cap)],\n\t\t});\n\t\tconst [availableBaseAmount, lockedBaseAmount, availableQuoteAmount, lockedQuoteAmount] = (\n\t\t\tawait this.suiClient.devInspectTransactionBlock({\n\t\t\t\ttransactionBlock: txb,\n\t\t\t\tsender: this.currentAddress,\n\t\t\t})\n\t\t).results![0].returnValues!.map(([bytes, _]) => BigInt(bcs.de('u64', Uint8Array.from(bytes))));\n\t\treturn {\n\t\t\tavailableBaseAmount,\n\t\t\tlockedBaseAmount,\n\t\t\tavailableQuoteAmount,\n\t\t\tlockedQuoteAmount,\n\t\t};\n\t}\n\n\t/**\n\t * @description get the open orders of the current user\n\t * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\n\t * @param accountCap your accountCap, eg: 0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3. If not provided, `this.accountCap` will be used.\n\t */\n\tasync listOpenOrders(\n\t\tpoolId: string,\n\t\taccountCap: string | undefined = undefined,\n\t): Promise<Order[]> {\n\t\tconst txb = new TransactionBlock();\n\t\tconst cap = this.#checkAccountCap(accountCap);\n\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::list_open_orders`,\n\t\t\targuments: [txb.object(poolId), txb.object(cap)],\n\t\t});\n\n\t\tconst results = (\n\t\t\tawait this.suiClient.devInspectTransactionBlock({\n\t\t\t\ttransactionBlock: txb,\n\t\t\t\tsender: this.currentAddress,\n\t\t\t})\n\t\t).results;\n\n\t\tif (!results) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn bcs.de('vector<Order>', Uint8Array.from(results![0].returnValues![0][0]));\n\t}\n\n\t/**\n\t * @description get the market price {bestBidPrice, bestAskPrice}\n\t * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\n\t */\n\tasync getMarketPrice(poolId: string): Promise<MarketPrice> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::get_market_price`,\n\t\t\targuments: [txb.object(poolId)],\n\t\t});\n\t\tconst resp = (\n\t\t\tawait this.suiClient.devInspectTransactionBlock({\n\t\t\t\ttransactionBlock: txb,\n\t\t\t\tsender: this.currentAddress,\n\t\t\t})\n\t\t).results![0].returnValues!.map(([bytes, _]) => {\n\t\t\tconst opt = bcs.de('Option<u64>', Uint8Array.from(bytes));\n\t\t\treturn 'Some' in opt ? BigInt(opt.Some) : undefined;\n\t\t});\n\n\t\treturn { bestBidPrice: resp[0], bestAskPrice: resp[1] };\n\t}\n\n\t/**\n\t * @description get level2 book status\n\t * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4\n\t * @param lowerPrice lower price you want to query in the level2 book, eg: 18000000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.\n\t * @param higherPrice higher price you want to query in the level2 book, eg: 20000000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.\n\t * @param isBidSide true: query bid side, false: query ask side\n\t */\n\tasync getLevel2BookStatus(\n\t\tpoolId: string,\n\t\tlowerPrice: bigint,\n\t\thigherPrice: bigint,\n\t\tside: 'bid' | 'ask',\n\t): Promise<Level2BookStatusPoint[]> {\n\t\tconst txb = new TransactionBlock();\n\t\ttxb.moveCall({\n\t\t\ttypeArguments: await this.getPoolTypeArgs(poolId),\n\t\t\ttarget: `${PACKAGE_ID}::${MODULE_CLOB}::get_level2_book_status_${side}_side`,\n\t\t\targuments: [\n\t\t\t\ttxb.object(poolId),\n\t\t\t\ttxb.pure(String(lowerPrice)),\n\t\t\t\ttxb.pure(String(higherPrice)),\n\t\t\t\ttxb.object(SUI_CLOCK_OBJECT_ID),\n\t\t\t],\n\t\t});\n\t\tconst results = (\n\t\t\tawait this.suiClient.devInspectTransactionBlock({\n\t\t\t\ttransactionBlock: txb,\n\t\t\t\tsender: this.currentAddress,\n\t\t\t})\n\t\t).results![0].returnValues!.map(([bytes, _]) =>\n\t\t\tbcs.de('vector<u64>', Uint8Array.from(bytes)).map((s: string) => BigInt(s)),\n\t\t);\n\t\treturn results[0].map((price: bigint, i: number) => ({ price, depth: results[1][i] }));\n\t}\n\n\t#checkAccountCap(accountCap: string | undefined = undefined): string {\n\t\tconst cap = accountCap ?? this.accountCap;\n\t\tif (cap === undefined) {\n\t\t\tthrow new Error('accountCap is undefined, please call setAccountCap() first');\n\t\t}\n\t\treturn normalizeSuiObjectId(cap);\n\t}\n\n\t#checkAddress(recipientAddress: string): string {\n\t\tif (recipientAddress === DUMMY_ADDRESS) {\n\t\t\tthrow new Error('Current address cannot be DUMMY_ADDRESS');\n\t\t}\n\t\treturn normalizeSuiAddress(recipientAddress);\n\t}\n\n\tasync #getCoinType(coinId: string) {\n\t\tconst resp = await this.suiClient.getObject({\n\t\t\tid: coinId,\n\t\t\toptions: { showType: true },\n\t\t});\n\t\treturn Coin.getCoinTypeArg(resp);\n\t}\n\n\t#nextClientOrderId() {\n\t\tconst id = this.clientOrderId;\n\t\tthis.clientOrderId += 1;\n\t\treturn id;\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { SUI_TYPE_ARG, normalizeStructTag } from '@mysten/sui.js/utils';\n\nexport const PACKAGE_ID = '0xdee9';\n\nexport const MODULE_CLOB = 'clob_v2';\n\nexport const MODULE_CUSTODIAN = 'custodian_v2';\n\nexport const CREATION_FEE = 100 * 1e9;\n\nexport const NORMALIZED_SUI_COIN_TYPE = normalizeStructTag(SUI_TYPE_ARG);\n\nexport const ORDER_DEFAULT_EXPIRATION_IN_MS = 1000 * 60 * 60 * 24; // 24 hours\n\nexport const FLOAT_SCALING_FACTOR = 1_000_000_000n;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui.js/bcs';\n\nbcs.registerStructType('Order', {\n\torderId: 'u64',\n\tclientOrderId: 'u64',\n\tprice: 'u64',\n\toriginalQuantity: 'u64',\n\tquantity: 'u64',\n\tisBid: 'bool',\n\towner: 'address',\n\texpireTimestamp: 'u64',\n\tselfMatchingPrevention: 'u8',\n});\n\nexport { bcs };\n"],"mappings":"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","names":["import_utils"]}