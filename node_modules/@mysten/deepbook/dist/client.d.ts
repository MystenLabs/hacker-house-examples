import { OrderArguments, PaginatedEvents, PaginationArguments } from '@mysten/sui.js/client';
import { SuiClient } from '@mysten/sui.js/client';
import { TransactionBlock } from '@mysten/sui.js/transactions';
import { Level2BookStatusPoint, LimitOrderType, MarketPrice, Order, PaginatedPoolSummary, PoolSummary, SelfMatchingPreventionStyle, UserPosition } from './types';
export declare class DeepBookClient {
    #private;
    suiClient: SuiClient;
    accountCap: string | undefined;
    currentAddress: string;
    private clientOrderId;
    /**
     *
     * @param suiClient connection to fullnode
     * @param accountCap (optional) only required for wrting operations
     * @param currentAddress (optional) address of the current user (default: DUMMY_ADDRESS)
     */
    constructor(suiClient?: SuiClient, accountCap?: string | undefined, currentAddress?: string, clientOrderId?: number);
    /**
     * @param cap set the account cap for interacting with DeepBook
     */
    setAccountCap(cap: string): Promise<void>;
    /**
     * @description: Create pool for trading pair
     * @param baseAssetType Full coin type of the base asset, eg: "0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC"
     * @param quoteAssetType Full coin type of quote asset, eg: "0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT"
     * @param tickSize Minimal Price Change Accuracy of this pool, eg: 10000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.
     * @param lotSize Minimal Lot Change Accuracy of this pool, eg: 10000.
     */
    createPool(baseAssetType: string, quoteAssetType: string, tickSize: bigint, lotSize: bigint): TransactionBlock;
    /**
     * @description: Create pool for trading pair
     * @param baseAssetType Full coin type of the base asset, eg: "0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::wbtc::WBTC"
     * @param quoteAssetType Full coin type of quote asset, eg: "0x3d0d0ce17dcd3b40c2d839d96ce66871ffb40e1154a8dd99af72292b3d10d7fc::usdt::USDT"
     * @param tickSize Minimal Price Change Accuracy of this pool, eg: 10000000. The number must be an interger float scaled by `FLOAT_SCALING_FACTOR`.
     * @param lotSize Minimal Lot Change Accuracy of this pool, eg: 10000.
     * @param takerFeeRate Customized taker fee rate, float scaled by `FLOAT_SCALING_FACTOR`, Taker_fee_rate of 0.25% should be 2_500_000 for example
     * @param makerRebateRate Customized maker rebate rate, float scaled by `FLOAT_SCALING_FACTOR`,  should be less than or equal to the taker_rebate_rate
     */
    createCustomizedPool(baseAssetType: string, quoteAssetType: string, tickSize: bigint, lotSize: bigint, takerFeeRate: bigint, makerRebateRate: bigint): TransactionBlock;
    /**
     * @description: Create and Transfer custodian account to user
     * @param currentAddress: current user address, eg: "0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966"
     */
    createAccount(currentAddress?: string): TransactionBlock;
    /**
     * @description: Create and Transfer custodian account to user
     * @param currentAddress: current user address, eg: "0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966"
     * @param accountCap: Object id of Account Capacity under user address, created after invoking createAccount, eg: "0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3"
     */
    createChildAccountCap(currentAddress?: string, accountCap?: string | undefined): TransactionBlock;
    /**
     * @description construct transaction block for depositing asset into a pool.
     * @param poolId the pool id for the deposit
     * @param coinId the coin used for the deposit. You can omit this argument if you are depositing SUI, in which case
     * gas coin will be used
     * @param amount the amount of coin to deposit. If omitted, the entire balance of the coin will be deposited
     */
    deposit(poolId: string, coinId?: string | undefined, quantity?: bigint | undefined): Promise<TransactionBlock>;
    /**
     * @description construct transaction block for withdrawing asset from a pool.
     * @param poolId the pool id for the withdraw
     * @param amount the amount of coin to withdraw
     * @param assetType Base or Quote
     * @param recipientAddress the address to receive the withdrawn asset. If omitted, `this.currentAddress` will be used. The function
     * will throw if the `recipientAddress === DUMMY_ADDRESS`
     */
    withdraw(poolId: string, quantity: bigint, assetType: 'base' | 'quote', recipientAddress?: string): Promise<TransactionBlock>;
    /**
     * @description: place a limit order
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param price: price of the limit order. The number must be an interger float scaled by `FLOAT_SCALING_FACTOR`.
     * @param quantity: quantity of the limit order in BASE ASSET, eg: 100000000.
     * @param orderType: bid for buying base with quote, ask for selling base for quote
     * @param expirationTimestamp: expiration timestamp of the limit order in ms, eg: 1620000000000. If omitted, the order will expire in 1 day
     * from the time this function is called(not the time the transaction is executed)
     * @param restriction restrictions on limit orders, explain in doc for more details, eg: 0
     * @param clientOrderId a client side defined order number for bookkeeping purpose, e.g., "1", "2", etc. If omitted, the sdk will
     * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances
     * @param selfMatchingPrevention: Options for self-match prevention. Right now only support `CANCEL_OLDEST`
     */
    placeLimitOrder(poolId: string, price: bigint, quantity: bigint, orderType: 'bid' | 'ask', expirationTimestamp?: number, restriction?: LimitOrderType, clientOrderId?: string | undefined, selfMatchingPrevention?: SelfMatchingPreventionStyle): Promise<TransactionBlock>;
    /**
     * @description: place a market order
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param quantity Amount of quote asset to swap in base asset
     * @param orderType bid for buying base with quote, ask for selling base for quote
     * @param baseCoin the objectId of the base coin
     * @param quoteCoin the objectId of the quote coin
     * @param clientOrderId a client side defined order id for bookkeeping purpose. eg: "1" , "2", ... If omitted, the sdk will
     * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances
     * @param recipientAddress: address to return the unused amounts, eg: "0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966"
     */
    placeMarketOrder(poolId: string, quantity: bigint, orderType: 'bid' | 'ask', baseCoin?: string | undefined, quoteCoin?: string | undefined, clientOrderId?: string | undefined, recipientAddress?: string): Promise<TransactionBlock>;
    /**
     * @description: swap exact quote for base
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param tokenObjectIn: Object id of the token to swap: eg: "0x6e566fec4c388eeb78a7dab832c9f0212eb2ac7e8699500e203def5b41b9c70d"
     * @param amountIn: amount of token to buy or sell, eg: 10000000.
     * @param currentAddress: current user address, eg: "0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966"
     * @param clientOrderId a client side defined order id for bookkeeping purpose, eg: "1" , "2", ... If omitted, the sdk will
     * assign a increasing number starting from 0. But this number might be duplicated if you are using multiple sdk instances
     */
    swapExactQuoteForBase(poolId: string, tokenObjectIn: string, amountIn: bigint, currentAddress: string, clientOrderId?: string | undefined): Promise<TransactionBlock>;
    /**
     * @description swap exact base for quote
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param tokenObjectIn Object id of the token to swap: eg: "0x6e566fec4c388eeb78a7dab832c9f0212eb2ac7e8699500e203def5b41b9c70d"
     * @param amountIn amount of token to buy or sell, eg: 10000000
     * @param currentAddress current user address, eg: "0xbddc9d4961b46a130c2e1f38585bbc6fa8077ce54bcb206b26874ac08d607966"
     * @param clientOrderId a client side defined order number for bookkeeping purpose. eg: "1" , "2", ...
     */
    swapExactBaseForQuote(poolId: string, tokenObjectIn: string, amountIn: bigint, currentAddress: string, clientOrderId?: string | undefined): Promise<TransactionBlock>;
    /**
     * @description: cancel an order
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param orderId orderId of a limit order, you can find them through function query.list_open_orders eg: "0"
     */
    cancelOrder(poolId: string, orderId: string): Promise<TransactionBlock>;
    /**
     * @description: Cancel all limit orders under a certain account capacity
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     */
    cancelAllOrders(poolId: string): Promise<TransactionBlock>;
    /**
     * @description: batch cancel order
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param orderIds array of order ids you want to cancel, you can find your open orders by query.list_open_orders eg: ["0", "1", "2"]
     */
    batchCancelOrder(poolId: string, orderIds: string[]): Promise<TransactionBlock>;
    /**
     * @param poolId Object id of pool, created after invoking createPool, eg: "0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4"
     * @param orderIds array of expired order ids to clean, eg: ["0", "1", "2"]
     * @param orderOwners array of Order owners, should be the owner addresses from the account capacities which placed the orders
     */
    cleanUpExpiredOrders(poolId: string, orderIds: string[], orderOwners: string[]): Promise<TransactionBlock>;
    /**
     * @description returns paginated list of pools created in DeepBook by querying for the
     * `PoolCreated` event. Warning: this method can return incomplete results if the upstream data source
     * is pruned.
     */
    getAllPools(input: PaginationArguments<PaginatedEvents['nextCursor']> & OrderArguments): Promise<PaginatedPoolSummary>;
    /**
     * @description Fetch metadata for a pool
     * @param poolId object id of the pool
     * @returns Metadata for the Pool
     */
    getPoolInfo(poolId: string): Promise<PoolSummary>;
    getPoolTypeArgs(poolId: string): Promise<string[]>;
    /**
     * @description get the order status
     * @param poolId: the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4
     * @param orderId the order id, eg: "1"
     */
    getOrderStatus(poolId: string, orderId: string, accountCap?: string | undefined): Promise<Order | undefined>;
    /**
     * @description: get the base and quote token in custodian account
     * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4
     * @param accountCap your accountCap, eg: 0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3. If not provided, `this.accountCap` will be used.
     */
    getUserPosition(poolId: string, accountCap?: string | undefined): Promise<UserPosition>;
    /**
     * @description get the open orders of the current user
     * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4
     * @param accountCap your accountCap, eg: 0x6f699fef193723277559c8f499ca3706121a65ac96d273151b8e52deb29135d3. If not provided, `this.accountCap` will be used.
     */
    listOpenOrders(poolId: string, accountCap?: string | undefined): Promise<Order[]>;
    /**
     * @description get the market price {bestBidPrice, bestAskPrice}
     * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4
     */
    getMarketPrice(poolId: string): Promise<MarketPrice>;
    /**
     * @description get level2 book status
     * @param poolId the pool id, eg: 0xcaee8e1c046b58e55196105f1436a2337dcaa0c340a7a8c8baf65e4afb8823a4
     * @param lowerPrice lower price you want to query in the level2 book, eg: 18000000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.
     * @param higherPrice higher price you want to query in the level2 book, eg: 20000000000. The number must be an integer float scaled by `FLOAT_SCALING_FACTOR`.
     * @param isBidSide true: query bid side, false: query ask side
     */
    getLevel2BookStatus(poolId: string, lowerPrice: bigint, higherPrice: bigint, side: 'bid' | 'ask'): Promise<Level2BookStatusPoint[]>;
}
